/*
 * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com)
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - AWS Secret Manager Connector'

def packageName = "aws.secretmanager"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    testCoverageParam = "--code-coverage --coverage-format=xml"
    isConnector = true
    platform = "java21"
}

configurations {
    externalJars
}

dependencies {
    externalJars(group: 'io.ballerina.stdlib', name: 'time-native', version: "${stdlibTimeVersion}")

    externalJars(group: 'software.amazon.awssdk', name: 'secretsmanager', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'apache-client', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'auth', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'aws-core', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'aws-json-protocol', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'checksums', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'checksums-spi', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'endpoints-spi', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'http-auth', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'http-auth-aws', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'http-auth-spi', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'http-client-spi', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'identity-spi', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'json-utils', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'metrics-spi', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'profiles', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'protocol-core', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'regions', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'retries', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'retries-spi', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'sdk-core', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'third-party-jackson-core', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'software.amazon.awssdk', name: 'utils', version: "${awsJavaSdkVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.httpcomponents', name: 'httpcore', version: "${apacheHttpCoreVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.httpcomponents', name: 'httpclient', version: "${apacheHttpClientVersion}") {
        transitive = false
    }
    externalJars(group: 'org.reactivestreams', name: 'reactive-streams', version: "${reactiveStreamsVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        newBallerinaToml = newBallerinaToml.replace('@time.native.version@', project.stdlibTimeVersion)
        newBallerinaToml = newBallerinaToml.replace("@aws.sdk.version@", project.awsJavaSdkVersion)
        newBallerinaToml = newBallerinaToml.replace("@apache.httpcore.version@", project.apacheHttpCoreVersion)
        newBallerinaToml = newBallerinaToml.replace("@apache.httpclient.version@", project.apacheHttpClientVersion)
        newBallerinaToml = newBallerinaToml.replace("@reactivestreams.version@", project.reactiveStreamsVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

build.dependsOn copyToLib
build.dependsOn ":${packageName}-native:build"

test.dependsOn ":${packageName}-native:build"

publish.dependsOn build
publishToMavenLocal.dependsOn build
